class MyHashMap:
    """
    Open Addressing for handling Collisions
    index = (5 * index + 1) % self->capacity;
    """

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.capacity = 1 << 3
        self.load_factor = 0.75
        self.size = 0
        self.nodes = [Node(-1, -1) for _ in range(self.capacity)]

    def put(self, key, value):
        """
        value will always be non-negative.
        """
        index1 = self.myhash(key)
        while (self.nodes[index1].key != -1):
            if (self.nodes[index1].key == key):
                self.nodes[index1].value = value
                return
            if (self.nodes[index1].key == -2):
                break
            index1 = (5 * index1 + 1) % self.capacity

        self.nodes[index1].key = key
        self.nodes[index1].value = value
        self.size += 1

        if self.size / self.capacity >= self.load_factor:
            self.rehash()

    def get(self, key):
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        """
        index1 = self.myhash(key)
        while (self.nodes[index1].key != -1):
            if (self.nodes[index1].key == key):
                return self.nodes[index1].value
            index1 = (5 * index1 + 1) % self.capacity
        return -1

    def remove(self, key):
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        """
        index1 = self.myhash(key)
        while (self.nodes[index1].key != -1):
            if (self.nodes[index1].key == key):
                self.nodes[index1] = Node(-2, -2)
                self.size -= 1
                return
            index1 = (5 * index1 + 1) % self.capacity

    def myhash(self, key):
        return key % self.capacity

    def rehash(self):
        self.capacity <<= 1
        new_nodes = [Node(-1, -1) for _ in range(self.capacity)]

        for i in range(self.capacity >> 1):
            if self.nodes[i].key != -1:
                index1 = self.myhash(self.nodes[i].key)

                while (new_nodes[index1].key != -1):
                    index1 = (5 * index1 + 1) % self.capacity

                new_nodes[index1].key = self.nodes[i].key
                new_nodes[index1].value = self.nodes[i].value
        self.nodes = new_nodes

    def displayMap(self):
        for i in range(self.capacity):
            print(str(i) + ": key: " + str(self.nodes[i].key) + " value: " + str(self.nodes[i].value))


class Node:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.next = None
